.\"Generate README file for github: MANWIDTH=80 man ./cshatag.1 > README
.TH GOSHATAG 1 "MAY 2012" "Version 3.0.0" "User Manuals"
.SH NAME

goshatag \- tag files with sha256 hashes to detect bitrot

.SH SYNOPSIS

goshatag [OPTIONS] FILE [FILE...]

.SH DESCRIPTION

goshatag is a minimal and fast re-implementation of shatag
.br
( https://github.com/maugier/shatag , written in Python
by Maxime Augier)
.br
in a compiled language (since v2.0: Go, earlier versions: C).

goshatag is a tool to detect silent data corruption. It writes
the mtime and the sha256 checksum of a file into the file's
extended attributes. The filesystem needs to be mounted with
user_xattr enabled for this to work.
When run again, it compares stored mtime and checksum. If it
finds that the mtime is unchanged but the checksum has changed,
it warns on stderr.
In any case, the status of the file is printed to stdout
and the stored checksum is updated.

File statuses that appear on stdout are:
.br
	<new>         file is missing both attributes
.br
	<outdated>    both mtime and checksum have changed
.br
	<ok>          both checksum and mtime stayed the same
.br
	<timechange>  only mtime has changed, checksum stayed the same
.br
	<corrupt>     mtime stayed the same but checksum changed

goshatag no longer aims to be format-compatible with (c)shatag.
If you want to use a cshatag filesystem with goshatag, please run
goshatag with the argument -migrate to completion at least once.
The migration process can be interrupted safely.
(see the COMPATIBILITY section).

cshatag was written in C in 2012 and has been rewritten in Go in 2019.
goshatag was forked in 2025.

.SH OPTIONS

-dry-run    don't make any changes
.br
-recursive  recursively process the contents of directories
.br
-remove     remove cshatag's xattrs from FILE
.br
-q          quiet mode - don't report <ok> files
.br
-qq         quiet2 mode - only report <corrupt> files and errors
.br
-fix        fix the stored sha256 on corrupt files
.br
-migrate    migrate from user.shatag.{sha256,ts} to user.hash (ext4 compatibility)
.br
-plaintext  use user.shatag.{sha256,ts} instead of user.hash (cshatag compatibility)
.br
-printok    print sha256 and ts for <ok> files

.SH EXAMPLES

Check all regular files in the current working directory's file tree:
.br
# goshatag -qq -recursive .
.br
Errors like corrupt files will be printed to stderr.
Run without "-qq" to see progress output.

To remove extended attributes from all files:
.br
# goshatag -recursive -remove .

To migrate from cshatag to goshatag:
.br
# goshatag -qq -recursive -migrate .

To remove extended attributes from all files, including (c)shatag attributes:
.br
# goshatag -recursive -plaintext -remove .

.SH "RETURN VALUE"

0 Success
.br
1 Wrong number of arguments
.br
2 One or more files could not be opened
.br
3 One or more files is not a regular file
.br
4 Extended attributes could not be written to one or more files
.br
5 At least one file was found to be corrupt
.br
6 More than one type of error occurred

.SH COMPATIBILITY

goshatag writes the extended attribute user.hash with both the sha256
hash and the ASCII encoded time, whereas the original cshatag and shatag use
the attribut names user.shatag.sha256 and user.shatag.ts
goshatag and cshatag use higher precision timestamps as compared to the 
shatag (python) version

.SH AUTHORS
somehibs <@github>
.br
https://github.com/somehibs/goshatag

Jakob Unterwurzacher <jakobunt@gmail.com>
.br
https://github.com/rfjakob/cshatag

.SH COPYRIGHT
Copyright 2025 somehibs. MIT License.
Copyright 2012 Jakob Unterwurzacher. MIT License.

.SH "SEE ALSO"
cshatag(1), shatag(1), sha256sum(1), getfattr(1), setfattr(1)
